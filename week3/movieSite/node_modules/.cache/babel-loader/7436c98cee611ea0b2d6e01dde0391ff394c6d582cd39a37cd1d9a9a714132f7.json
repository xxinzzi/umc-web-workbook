{"ast":null,"code":"var _jsxFileName = \"/Users/xxinzzi/Desktop/UMC/week3/movieSite/src/components/RenderMovies.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Movie from \"./Movie\";\nimport Loader from \"./Loader\";\nimport Pagination from \"./Pagination\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  display: flex;\n  //height: calc(100% - 20px);\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n`;\n_c = Wrapper;\nconst MovieWrapper = styled.div`\n    display: grid;\n    width: 100%;\n    grid-template-columns: repeat(5, 1fr);\n    grid-gap: 10px;\n`;\n_c2 = MovieWrapper;\nconst RenderMovies = ({\n  fetchUrl\n}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1NzJlMTc4NmMzOTRiNTNiNDE0YjI4OWY0ZWU5YTk4NyIsInN1YiI6IjY2MzM0N2U5ODEzY2I2MDEyMTg2ZTlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.A159m_rOX_HnuFPW_aHnMOTiMYyXhQbT3yMamEeazCg'\n      }\n    };\n    fetch(fetchUrl, options).then(response => response.json()).then(data => {\n      setMovies(data.results); // API 호출 결과를 movies 상태에 저장\n      setLoading(false); // 로딩 상태 변경\n    }).catch(err => {\n      console.error(err);\n      setLoading(false); // 에러 발생 시 로딩 상태 변경\n    });\n  }, [fetchUrl]); // fetchUrl이 변경될 때마다 useEffect 재실행\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MovieWrapper, {\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movie, {\n          // 각 영화마다 고유한 key prop 추가\n          id: movie.id,\n          poster_path: `https://image.tmdb.org/t/p/w500/${movie.poster_path}`,\n          title: movie.title,\n          overview: movie.overview,\n          vote_average: movie.vote_average\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        page: page\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(RenderMovies, \"1CKmgsbuFjewbGnYkjmhEBs6qQ4=\");\n_c3 = RenderMovies;\nexport default RenderMovies;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"MovieWrapper\");\n$RefreshReg$(_c3, \"RenderMovies\");","map":{"version":3,"names":["React","useEffect","useState","Movie","Loader","Pagination","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Wrapper","div","_c","MovieWrapper","_c2","RenderMovies","fetchUrl","_s","loading","setLoading","movies","setMovies","options","method","headers","accept","Authorization","fetch","then","response","json","data","results","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","id","poster_path","title","overview","vote_average","page","_c3","$RefreshReg$"],"sources":["/Users/xxinzzi/Desktop/UMC/week3/movieSite/src/components/RenderMovies.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Movie from \"./Movie\";\nimport Loader from \"./Loader\";\nimport Pagination from \"./Pagination\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  //height: calc(100% - 20px);\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst MovieWrapper = styled.div`\n    display: grid;\n    width: 100%;\n    grid-template-columns: repeat(5, 1fr);\n    grid-gap: 10px;\n`;\n\nconst RenderMovies = ( {fetchUrl} ) => {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1NzJlMTc4NmMzOTRiNTNiNDE0YjI4OWY0ZWU5YTk4NyIsInN1YiI6IjY2MzM0N2U5ODEzY2I2MDEyMTg2ZTlhYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.A159m_rOX_HnuFPW_aHnMOTiMYyXhQbT3yMamEeazCg'\n      }\n    };\n\n    fetch(fetchUrl, options)\n      .then(response => response.json())\n      .then(data => {\n        setMovies(data.results); // API 호출 결과를 movies 상태에 저장\n        setLoading(false); // 로딩 상태 변경\n      })\n      .catch(err => {\n        console.error(err);\n        setLoading(false); // 에러 발생 시 로딩 상태 변경\n      });\n  }, [fetchUrl]); // fetchUrl이 변경될 때마다 useEffect 재실행\n\n  return (\n    <Wrapper>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <MovieWrapper>\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id} // 각 영화마다 고유한 key prop 추가\n                id={movie.id}\n                poster_path={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                title={movie.title}\n                overview={movie.overview}\n                vote_average={movie.vote_average}\n              />\n            ))}\n          </MovieWrapper>\n          <Pagination page={page}/>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default RenderMovies;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}